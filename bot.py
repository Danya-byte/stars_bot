import asyncio
import atexit
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
import aiosqlite  

import config
import database

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = Bot(token=config.TOKEN)
dp = Dispatcher()

commands = [
    '/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    '/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
    '/burgers - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –±—É—Ä–≥–µ—Ä–æ–≤',
    '/cart - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã'
]


def stars_payment_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Stars", pay=True)
    return keyboard.as_markup()


@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    state = await database.async_get_user_state(user_id)
    if state:
        await message.reply(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤—ã –±—ã–ª–∏: {state}')
    else:
        await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –±—É—Ä–≥–µ—Ä–æ–≤!')
    await database.async_save_user_state(user_id, 'start')
    await message.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' + '\n'.join(commands))


@dp.message(Command("help"))
async def help_command(message: types.Message):
    user_id = message.from_user.id
    await database.async_save_user_state(user_id, 'help')
    await message.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' + '\n'.join(commands))


@dp.message(Command("burgers"))
async def list_burgers(message: types.Message):
    user_id = message.from_user.id
    await database.async_save_user_state(user_id, 'burgers')
    burgers = await database.async_get_burgers()

    if not burgers:
        await message.reply('–ë—É—Ä–≥–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.')
        return

    keyboard = []
    for burger in burgers:
        keyboard.append([InlineKeyboardButton(text=burger[1], callback_data=f'burger_{burger[0]}')])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ä–≥–µ—Ä:', reply_markup=reply_markup)


@dp.callback_query(F.data.startswith('burger_'))
async def burger_details(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    burger_id = int(callback_query.data.split('_')[1])
    burgers = await database.async_get_burgers()
    burger = next((b for b in burgers if b[0] == burger_id), None)

    if burger:
        text = f'{burger[1]}\n\n{burger[2]}\n\n–¶–µ–Ω–∞: 1 ‚òÖ'
        user_id = callback_query.from_user.id
        await database.async_save_user_state(user_id, f'awaiting_quantity_{burger_id}_1')

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text='-', callback_data=f'decrease_{burger_id}'),
            InlineKeyboardButton(text='1', callback_data=f'quantity_{burger_id}_1'),
            InlineKeyboardButton(text='+', callback_data=f'increase_{burger_id}')
        )
        builder.row(
            InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{burger_id}')
        )

        await bot.send_message(
            callback_query.message.chat.id,
            f'{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ä–≥–µ—Ä–æ–≤:',
            reply_markup=builder.as_markup()
        )
    else:
        await bot.send_message(callback_query.message.chat.id, '–ë—É—Ä–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')


@dp.callback_query(F.data.startswith('increase_'))
async def increase_quantity(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    burger_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    state = await database.async_get_user_state(user_id)

    if state and state.startswith('awaiting_quantity_'):
        current_quantity = int(state.split('_')[3])
        new_quantity = current_quantity + 1
        await database.async_save_user_state(user_id, f'awaiting_quantity_{burger_id}_{new_quantity}')

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text='-', callback_data=f'decrease_{burger_id}'),
            InlineKeyboardButton(text=str(new_quantity), callback_data=f'quantity_{burger_id}_{new_quantity}'),
            InlineKeyboardButton(text='+', callback_data=f'increase_{burger_id}')
        )
        builder.row(
            InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{burger_id}')
        )

        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data.startswith('decrease_'))
async def decrease_quantity(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    burger_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    state = await database.async_get_user_state(user_id)

    if state and state.startswith('awaiting_quantity_'):
        current_quantity = int(state.split('_')[3])
        new_quantity = max(current_quantity - 1, 1)
        await database.async_save_user_state(user_id, f'awaiting_quantity_{burger_id}_{new_quantity}')

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text='-', callback_data=f'decrease_{burger_id}'),
            InlineKeyboardButton(text=str(new_quantity), callback_data=f'quantity_{burger_id}_{new_quantity}'),
            InlineKeyboardButton(text='+', callback_data=f'increase_{burger_id}')
        )
        builder.row(
            InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{burger_id}')
        )

        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data.startswith('add_to_cart_'))
async def add_to_cart(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    data_parts = callback_query.data.split('_')

    try:
        burger_id = int(data_parts[3])
    except (IndexError, ValueError):
        await bot.send_message(callback_query.message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        return

    user_id = callback_query.from_user.id
    state = await database.async_get_user_state(user_id)

    if state and state.startswith('awaiting_quantity_'):
        try:
            quantity = int(state.split('_')[3])
        except ValueError:
            await bot.send_message(callback_query.message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.')
            return

        await database.async_add_to_cart(user_id, burger_id, quantity)
        await bot.send_message(callback_query.message.chat.id, f'–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} –±—É—Ä–≥–µ—Ä–∞(-–æ–≤) –≤ –∫–æ—Ä–∑–∏–Ω—É!')
        await database.async_save_user_state(user_id, 'start')
        await bot.send_message(callback_query.message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' + '\n'.join(commands))


@dp.message(Command("cart"))
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    cart_items = await database.async_get_cart(user_id)

    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    total_stars = sum(item[4] for item in cart_items)
    cart_text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"

    for item in cart_items:
        cart_text += f"üçî {item[1]} √ó {item[4]}\n"

    cart_text += f"\n**–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:** {total_stars} ‚òÖ"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û–ø–ª–∞—Ç–∏—Ç—å Stars", callback_data="buy")
    keyboard.button(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏", callback_data="clear_cart")

    await message.answer(
        cart_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "buy")
async def buy(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await send_invoice(callback_query)


async def send_invoice(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart_items = await database.async_get_cart(user_id)

    if not cart_items:
        await bot.edit_message_text(
            '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.',
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        return

    total_stars = sum(item[4] for item in cart_items)

    try:
        await bot.send_invoice(
            chat_id=callback_query.message.chat.id,
            title='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
            description=f'–û–ø–ª–∞—Ç–∞ {total_stars} ‚òÖ –∑–∞ –±—É—Ä–≥–µ—Ä—ã',
            provider_token="",
            currency='XTR',
            prices=[LabeledPrice(label='–ë—É—Ä–≥–µ—Ä—ã', amount=total_stars)],
            payload='burgers-payment',
            reply_markup=stars_payment_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await bot.send_message(
            callback_query.message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )


@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    payment_info = message.successful_payment

    async with aiosqlite.connect('burgers.db') as db:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        await db.execute('''
            INSERT INTO payments (user_id, payment_id, amount, currency)
            VALUES (?, ?, ?, ?)
        ''', (user_id,
              payment_info.provider_payment_charge_id,
              payment_info.total_amount,
              payment_info.currency))
        await db.commit()

    await database.async_clear_cart(user_id)
    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {payment_info.total_amount} ‚òÖ!")


@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    await database.async_clear_cart(user_id)
    await bot.send_message(callback_query.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")


@dp.callback_query(F.data.startswith('delete_'))
async def delete_burger(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    data_parts = callback_query.data.split('_')

    if len(data_parts) == 2 and data_parts[0] == 'delete' and data_parts[1].isdigit():
        burger_id = int(data_parts[1])
        user_id = callback_query.from_user.id
        cart_items = await database.async_get_cart(user_id)
        burger = next((b for b in cart_items if b[0] == burger_id), None)

        if burger:
            quantity = burger[4]
            builder = InlineKeyboardBuilder()
            for i in range(1, quantity + 1):
                builder.add(InlineKeyboardButton(text=str(i), callback_data=f'remove_{burger_id}_{i}'))
            builder.adjust(3)

            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=f'–°–∫–æ–ª—å–∫–æ –±—É—Ä–≥–µ—Ä–æ–≤ {burger[1]} –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?',
                reply_markup=builder.as_markup()
            )
        else:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text='–ë—É—Ä–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.'
            )
    else:
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text='–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
        )


@dp.callback_query(F.data.startswith('remove_'))
async def remove_burger(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    data_parts = callback_query.data.split('_')

    if len(data_parts) == 3 and data_parts[0] == 'remove' and data_parts[1].isdigit() and data_parts[2].isdigit():
        burger_id = int(data_parts[1])
        quantity_to_remove = int(data_parts[2])
        user_id = callback_query.from_user.id
        cart_items = await database.async_get_cart(user_id)
        burger = next((b for b in cart_items if b[0] == burger_id), None)

        if burger:
            quantity = burger[4]
            if 0 < quantity_to_remove <= quantity:
                await database.async_remove_from_cart(user_id, burger_id, quantity_to_remove)
                await bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=f'–£–¥–∞–ª–µ–Ω–æ {quantity_to_remove} –±—É—Ä–≥–µ—Ä–∞(-–æ–≤) {burger[1]}.'
                )
                await bot.send_message(
                    callback_query.message.chat.id,
                    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' + '\n'.join(commands)
                )
            else:
                await bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text='–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
                )
        else:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text='–ë—É—Ä–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.'
            )
    else:
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text='–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
        )


async def main():
    await dp.start_polling(bot)


async def shutdown():
    await bot.close()
    await asyncio.sleep(0.1)


def atexit_handler():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(shutdown())


if __name__ == '__main__':
    database.init_db()
    atexit.register(atexit_handler)
    asyncio.run(main())
